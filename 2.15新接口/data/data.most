// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type FieldReserve =
  {
    fieldName : Text;
    soc_density_amount : Text;
    soc_stock_amount : Text;
    std_amount : Text
  };
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type RESERVES =
  {
    id : Nat;
    name : Text;
    regionLevel : RegionLevel;
    soc_density_amount : Text;
    soc_stock_amount : Text;
    std_amount : Text;
    upload_count : Nat;
    year_end : Nat;
    year_start : Nat
  };
type RESERVESContainField =
  {
    fieldReserves : [FieldReserve];
    id : Nat;
    name : Text;
    regionLevel : RegionLevel;
    upload_count : Nat;
    year_end : Nat;
    year_start : Nat
  };
type RESERVESContainField__1 = RESERVESContainField;
type RESERVES__1 = RESERVES;
type RegionLevel = {#City; #Country_and_Region; #Province};
type Set<T> = Trie<T, ()>;
type SumRESERVES =
  {
    id : Nat;
    name : Text;
    regionLevel : RegionLevel;
    sumSoc : Text;
    upload_count : Nat;
    year_end : Nat;
    year_start : Nat
  };
type SumRESERVESContainField =
  {
    fieldReserves : [(Text, Text)];
    id : Nat;
    name : Text;
    regionLevel : RegionLevel;
    upload_count : Nat;
    year_end : Nat;
    year_start : Nat
  };
type SumRESERVESContainField__1 = SumRESERVESContainField;
type SumRESERVES__1 = SumRESERVES;
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var averageSoilFieldDatas_count : Nat;
  stable var averageSoilFieldDatas_entries :
    [(Nat, Set<RESERVESContainField__1>)];
  stable var averageSumFieldDatas_count : Nat;
  stable var averageSumFieldDatas_entries :
    [(Nat, Set<SumRESERVESContainField__1>)];
  stable var averageVegetationFieldDatas_count : Nat;
  stable var averageVegetationFieldDatas_entries :
    [(Nat, Set<RESERVESContainField__1>)];
  stable var idCount : Nat;
  stable var idToNameMap_entries : [(Nat, Text)];
  stable var nameToIdMap_entries : [(Text, Nat)];
  stable var soilDatas_count : Nat;
  stable var soilDatas_entries : [(Nat, Set<RESERVES__1>)];
  stable var soilFieldDatas_count : Nat;
  stable var soilFieldDatas_entries : [(Nat, Set<RESERVESContainField__1>)];
  stable var sumDatas_count : Nat;
  stable var sumDatas_entries : [(Nat, Set<SumRESERVES__1>)];
  stable var sumFieldDatas_count : Nat;
  stable var sumFieldDatas_entries : [(Nat, Set<SumRESERVESContainField__1>)];
  stable var vegetationDatas_count : Nat;
  stable var vegetationDatas_entries : [(Nat, Set<RESERVES__1>)];
  stable var vegetationFieldDatas_count : Nat;
  stable var vegetationFieldDatas_entries :
    [(Nat, Set<RESERVESContainField__1>)]
};
